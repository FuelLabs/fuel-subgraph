// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v4.25.1
// source: sf/fuel/type/v1/type.proto

package pbfuel

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              []byte         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Height          uint32         `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	DaHeight        uint64         `protobuf:"varint,3,opt,name=da_height,json=daHeight,proto3" json:"da_height,omitempty"`
	MsgReceiptCount uint64         `protobuf:"varint,4,opt,name=msg_receipt_count,json=msgReceiptCount,proto3" json:"msg_receipt_count,omitempty"`
	TxRoot          []byte         `protobuf:"bytes,5,opt,name=tx_root,json=txRoot,proto3" json:"tx_root,omitempty"`
	MsgReceiptRoot  []byte         `protobuf:"bytes,6,opt,name=msg_receipt_root,json=msgReceiptRoot,proto3" json:"msg_receipt_root,omitempty"`
	PrevId          []byte         `protobuf:"bytes,7,opt,name=prev_id,json=prevId,proto3" json:"prev_id,omitempty"`
	PrevRoot        []byte         `protobuf:"bytes,8,opt,name=prev_root,json=prevRoot,proto3" json:"prev_root,omitempty"`
	Timestamp       uint64         `protobuf:"fixed64,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ApplicationHash []byte         `protobuf:"bytes,10,opt,name=application_hash,json=applicationHash,proto3" json:"application_hash,omitempty"`
	Transactions    []*Transaction `protobuf:"bytes,11,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Block) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Block) GetDaHeight() uint64 {
	if x != nil {
		return x.DaHeight
	}
	return 0
}

func (x *Block) GetMsgReceiptCount() uint64 {
	if x != nil {
		return x.MsgReceiptCount
	}
	return 0
}

func (x *Block) GetTxRoot() []byte {
	if x != nil {
		return x.TxRoot
	}
	return nil
}

func (x *Block) GetMsgReceiptRoot() []byte {
	if x != nil {
		return x.MsgReceiptRoot
	}
	return nil
}

func (x *Block) GetPrevId() []byte {
	if x != nil {
		return x.PrevId
	}
	return nil
}

func (x *Block) GetPrevRoot() []byte {
	if x != nil {
		return x.PrevRoot
	}
	return nil
}

func (x *Block) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Block) GetApplicationHash() []byte {
	if x != nil {
		return x.ApplicationHash
	}
	return nil
}

func (x *Block) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Transaction_Script
	//	*Transaction_Create
	//	*Transaction_Mint
	Kind isTransaction_Kind `protobuf_oneof:"kind"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{1}
}

func (m *Transaction) GetKind() isTransaction_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Transaction) GetScript() *Script {
	if x, ok := x.GetKind().(*Transaction_Script); ok {
		return x.Script
	}
	return nil
}

func (x *Transaction) GetCreate() *Create {
	if x, ok := x.GetKind().(*Transaction_Create); ok {
		return x.Create
	}
	return nil
}

func (x *Transaction) GetMint() *Mint {
	if x, ok := x.GetKind().(*Transaction_Mint); ok {
		return x.Mint
	}
	return nil
}

type isTransaction_Kind interface {
	isTransaction_Kind()
}

type Transaction_Script struct {
	Script *Script `protobuf:"bytes,1,opt,name=script,proto3,oneof"`
}

type Transaction_Create struct {
	Create *Create `protobuf:"bytes,2,opt,name=create,proto3,oneof"`
}

type Transaction_Mint struct {
	Mint *Mint `protobuf:"bytes,3,opt,name=mint,proto3,oneof"`
}

func (*Transaction_Script) isTransaction_Kind() {}

func (*Transaction_Create) isTransaction_Kind() {}

func (*Transaction_Mint) isTransaction_Kind() {}

type Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptGasLimit uint64    `protobuf:"varint,1,opt,name=script_gas_limit,json=scriptGasLimit,proto3" json:"script_gas_limit,omitempty"`
	Script         []byte    `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	ScriptData     []byte    `protobuf:"bytes,3,opt,name=script_data,json=scriptData,proto3" json:"script_data,omitempty"`
	Policies       *Policies `protobuf:"bytes,4,opt,name=policies,proto3" json:"policies,omitempty"`
	Inputs         []*Input  `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs        []*Output `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Witnesses      [][]byte  `protobuf:"bytes,7,rep,name=witnesses,proto3" json:"witnesses,omitempty"`
	ReceiptsRoot   []byte    `protobuf:"bytes,8,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
}

func (x *Script) Reset() {
	*x = Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{2}
}

func (x *Script) GetScriptGasLimit() uint64 {
	if x != nil {
		return x.ScriptGasLimit
	}
	return 0
}

func (x *Script) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *Script) GetScriptData() []byte {
	if x != nil {
		return x.ScriptData
	}
	return nil
}

func (x *Script) GetPolicies() *Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Script) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Script) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Script) GetWitnesses() [][]byte {
	if x != nil {
		return x.Witnesses
	}
	return nil
}

func (x *Script) GetReceiptsRoot() []byte {
	if x != nil {
		return x.ReceiptsRoot
	}
	return nil
}

type Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytecodeLength       uint64         `protobuf:"varint,1,opt,name=bytecode_length,json=bytecodeLength,proto3" json:"bytecode_length,omitempty"`
	BytecodeWitnessIndex uint32         `protobuf:"varint,2,opt,name=bytecode_witness_index,json=bytecodeWitnessIndex,proto3" json:"bytecode_witness_index,omitempty"`
	Policies             *Policies      `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
	StorageSlots         []*StorageSlot `protobuf:"bytes,4,rep,name=storage_slots,json=storageSlots,proto3" json:"storage_slots,omitempty"`
	Inputs               []*Input       `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs              []*Output      `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Witnesses            [][]byte       `protobuf:"bytes,7,rep,name=witnesses,proto3" json:"witnesses,omitempty"`
	Salt                 []byte         `protobuf:"bytes,8,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (x *Create) Reset() {
	*x = Create{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Create) ProtoMessage() {}

func (x *Create) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Create.ProtoReflect.Descriptor instead.
func (*Create) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{3}
}

func (x *Create) GetBytecodeLength() uint64 {
	if x != nil {
		return x.BytecodeLength
	}
	return 0
}

func (x *Create) GetBytecodeWitnessIndex() uint32 {
	if x != nil {
		return x.BytecodeWitnessIndex
	}
	return 0
}

func (x *Create) GetPolicies() *Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Create) GetStorageSlots() []*StorageSlot {
	if x != nil {
		return x.StorageSlots
	}
	return nil
}

func (x *Create) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Create) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Create) GetWitnesses() [][]byte {
	if x != nil {
		return x.Witnesses
	}
	return nil
}

func (x *Create) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

type Mint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxPointer      *TxPointer      `protobuf:"bytes,1,opt,name=tx_pointer,json=txPointer,proto3" json:"tx_pointer,omitempty"`
	InputContract  *InputContract  `protobuf:"bytes,2,opt,name=input_contract,json=inputContract,proto3" json:"input_contract,omitempty"`
	OutputContract *OutputContract `protobuf:"bytes,3,opt,name=output_contract,json=outputContract,proto3" json:"output_contract,omitempty"`
	MintAmount     uint64          `protobuf:"varint,4,opt,name=mint_amount,json=mintAmount,proto3" json:"mint_amount,omitempty"`
	MintAssetId    []byte          `protobuf:"bytes,5,opt,name=mint_asset_id,json=mintAssetId,proto3" json:"mint_asset_id,omitempty"`
}

func (x *Mint) Reset() {
	*x = Mint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mint) ProtoMessage() {}

func (x *Mint) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mint.ProtoReflect.Descriptor instead.
func (*Mint) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{4}
}

func (x *Mint) GetTxPointer() *TxPointer {
	if x != nil {
		return x.TxPointer
	}
	return nil
}

func (x *Mint) GetInputContract() *InputContract {
	if x != nil {
		return x.InputContract
	}
	return nil
}

func (x *Mint) GetOutputContract() *OutputContract {
	if x != nil {
		return x.OutputContract
	}
	return nil
}

func (x *Mint) GetMintAmount() uint64 {
	if x != nil {
		return x.MintAmount
	}
	return 0
}

func (x *Mint) GetMintAssetId() []byte {
	if x != nil {
		return x.MintAssetId
	}
	return nil
}

type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Input_CoinSigned
	//	*Input_CoinPredicate
	//	*Input_Contract
	//	*Input_MessageCoinSigned
	//	*Input_MessageCoinPredicate
	//	*Input_MessageDataSigned
	//	*Input_MessageDataPredicate
	Kind isInput_Kind `protobuf_oneof:"kind"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{5}
}

func (m *Input) GetKind() isInput_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Input) GetCoinSigned() *Coin {
	if x, ok := x.GetKind().(*Input_CoinSigned); ok {
		return x.CoinSigned
	}
	return nil
}

func (x *Input) GetCoinPredicate() *Coin {
	if x, ok := x.GetKind().(*Input_CoinPredicate); ok {
		return x.CoinPredicate
	}
	return nil
}

func (x *Input) GetContract() *InputContract {
	if x, ok := x.GetKind().(*Input_Contract); ok {
		return x.Contract
	}
	return nil
}

func (x *Input) GetMessageCoinSigned() *Message {
	if x, ok := x.GetKind().(*Input_MessageCoinSigned); ok {
		return x.MessageCoinSigned
	}
	return nil
}

func (x *Input) GetMessageCoinPredicate() *Message {
	if x, ok := x.GetKind().(*Input_MessageCoinPredicate); ok {
		return x.MessageCoinPredicate
	}
	return nil
}

func (x *Input) GetMessageDataSigned() *Message {
	if x, ok := x.GetKind().(*Input_MessageDataSigned); ok {
		return x.MessageDataSigned
	}
	return nil
}

func (x *Input) GetMessageDataPredicate() *Message {
	if x, ok := x.GetKind().(*Input_MessageDataPredicate); ok {
		return x.MessageDataPredicate
	}
	return nil
}

type isInput_Kind interface {
	isInput_Kind()
}

type Input_CoinSigned struct {
	CoinSigned *Coin `protobuf:"bytes,1,opt,name=coin_signed,json=coinSigned,proto3,oneof"`
}

type Input_CoinPredicate struct {
	CoinPredicate *Coin `protobuf:"bytes,2,opt,name=coin_predicate,json=coinPredicate,proto3,oneof"`
}

type Input_Contract struct {
	Contract *InputContract `protobuf:"bytes,3,opt,name=contract,proto3,oneof"`
}

type Input_MessageCoinSigned struct {
	MessageCoinSigned *Message `protobuf:"bytes,4,opt,name=message_coin_signed,json=messageCoinSigned,proto3,oneof"`
}

type Input_MessageCoinPredicate struct {
	MessageCoinPredicate *Message `protobuf:"bytes,5,opt,name=message_coin_predicate,json=messageCoinPredicate,proto3,oneof"`
}

type Input_MessageDataSigned struct {
	MessageDataSigned *Message `protobuf:"bytes,6,opt,name=message_data_signed,json=messageDataSigned,proto3,oneof"`
}

type Input_MessageDataPredicate struct {
	MessageDataPredicate *Message `protobuf:"bytes,7,opt,name=message_data_predicate,json=messageDataPredicate,proto3,oneof"`
}

func (*Input_CoinSigned) isInput_Kind() {}

func (*Input_CoinPredicate) isInput_Kind() {}

func (*Input_Contract) isInput_Kind() {}

func (*Input_MessageCoinSigned) isInput_Kind() {}

func (*Input_MessageCoinPredicate) isInput_Kind() {}

func (*Input_MessageDataSigned) isInput_Kind() {}

func (*Input_MessageDataPredicate) isInput_Kind() {}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtxoId           *UtxoId    `protobuf:"bytes,1,opt,name=utxo_id,json=utxoId,proto3" json:"utxo_id,omitempty"`
	Owner            []byte     `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Amount           uint64     `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetId          []byte     `protobuf:"bytes,4,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	TxPointer        *TxPointer `protobuf:"bytes,5,opt,name=tx_pointer,json=txPointer,proto3" json:"tx_pointer,omitempty"`
	WitnessIndex     uint32     `protobuf:"varint,6,opt,name=witness_index,json=witnessIndex,proto3" json:"witness_index,omitempty"`
	Maturity         uint32     `protobuf:"varint,7,opt,name=maturity,proto3" json:"maturity,omitempty"`
	PredicateGasUsed uint64     `protobuf:"varint,8,opt,name=predicate_gas_used,json=predicateGasUsed,proto3" json:"predicate_gas_used,omitempty"`
	Predicate        []byte     `protobuf:"bytes,9,opt,name=predicate,proto3" json:"predicate,omitempty"`
	PredicateData    []byte     `protobuf:"bytes,10,opt,name=predicate_data,json=predicateData,proto3" json:"predicate_data,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{6}
}

func (x *Coin) GetUtxoId() *UtxoId {
	if x != nil {
		return x.UtxoId
	}
	return nil
}

func (x *Coin) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Coin) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Coin) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *Coin) GetTxPointer() *TxPointer {
	if x != nil {
		return x.TxPointer
	}
	return nil
}

func (x *Coin) GetWitnessIndex() uint32 {
	if x != nil {
		return x.WitnessIndex
	}
	return 0
}

func (x *Coin) GetMaturity() uint32 {
	if x != nil {
		return x.Maturity
	}
	return 0
}

func (x *Coin) GetPredicateGasUsed() uint64 {
	if x != nil {
		return x.PredicateGasUsed
	}
	return 0
}

func (x *Coin) GetPredicate() []byte {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *Coin) GetPredicateData() []byte {
	if x != nil {
		return x.PredicateData
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender           []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient        []byte `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount           uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Nonce            []byte `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	WitnessIndex     uint32 `protobuf:"varint,5,opt,name=witness_index,json=witnessIndex,proto3" json:"witness_index,omitempty"`
	PredicateGasUsed uint64 `protobuf:"varint,6,opt,name=predicate_gas_used,json=predicateGasUsed,proto3" json:"predicate_gas_used,omitempty"`
	Data             []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Predicate        []byte `protobuf:"bytes,8,opt,name=predicate,proto3" json:"predicate,omitempty"`
	PredicateData    []byte `protobuf:"bytes,9,opt,name=predicate_data,json=predicateData,proto3" json:"predicate_data,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{7}
}

func (x *Message) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Message) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Message) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Message) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Message) GetWitnessIndex() uint32 {
	if x != nil {
		return x.WitnessIndex
	}
	return 0
}

func (x *Message) GetPredicateGasUsed() uint64 {
	if x != nil {
		return x.PredicateGasUsed
	}
	return 0
}

func (x *Message) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Message) GetPredicate() []byte {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *Message) GetPredicateData() []byte {
	if x != nil {
		return x.PredicateData
	}
	return nil
}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Output_Coin
	//	*Output_Contract
	//	*Output_Change
	//	*Output_Variable
	//	*Output_ContractCreated
	Kind isOutput_Kind `protobuf_oneof:"kind"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{8}
}

func (m *Output) GetKind() isOutput_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Output) GetCoin() *OutputCoin {
	if x, ok := x.GetKind().(*Output_Coin); ok {
		return x.Coin
	}
	return nil
}

func (x *Output) GetContract() *OutputContract {
	if x, ok := x.GetKind().(*Output_Contract); ok {
		return x.Contract
	}
	return nil
}

func (x *Output) GetChange() *OutputCoin {
	if x, ok := x.GetKind().(*Output_Change); ok {
		return x.Change
	}
	return nil
}

func (x *Output) GetVariable() *OutputCoin {
	if x, ok := x.GetKind().(*Output_Variable); ok {
		return x.Variable
	}
	return nil
}

func (x *Output) GetContractCreated() *OutputContractCreated {
	if x, ok := x.GetKind().(*Output_ContractCreated); ok {
		return x.ContractCreated
	}
	return nil
}

type isOutput_Kind interface {
	isOutput_Kind()
}

type Output_Coin struct {
	Coin *OutputCoin `protobuf:"bytes,1,opt,name=coin,proto3,oneof"`
}

type Output_Contract struct {
	Contract *OutputContract `protobuf:"bytes,2,opt,name=contract,proto3,oneof"`
}

type Output_Change struct {
	Change *OutputCoin `protobuf:"bytes,3,opt,name=change,proto3,oneof"`
}

type Output_Variable struct {
	Variable *OutputCoin `protobuf:"bytes,4,opt,name=variable,proto3,oneof"`
}

type Output_ContractCreated struct {
	ContractCreated *OutputContractCreated `protobuf:"bytes,5,opt,name=contract_created,json=contractCreated,proto3,oneof"`
}

func (*Output_Coin) isOutput_Kind() {}

func (*Output_Contract) isOutput_Kind() {}

func (*Output_Change) isOutput_Kind() {}

func (*Output_Variable) isOutput_Kind() {}

func (*Output_ContractCreated) isOutput_Kind() {}

type OutputCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To      []byte `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Amount  uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetId []byte `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *OutputCoin) Reset() {
	*x = OutputCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputCoin) ProtoMessage() {}

func (x *OutputCoin) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputCoin.ProtoReflect.Descriptor instead.
func (*OutputCoin) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{9}
}

func (x *OutputCoin) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *OutputCoin) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OutputCoin) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

type OutputContractCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId []byte `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	StateRoot  []byte `protobuf:"bytes,2,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
}

func (x *OutputContractCreated) Reset() {
	*x = OutputContractCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputContractCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputContractCreated) ProtoMessage() {}

func (x *OutputContractCreated) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputContractCreated.ProtoReflect.Descriptor instead.
func (*OutputContractCreated) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{10}
}

func (x *OutputContractCreated) GetContractId() []byte {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *OutputContractCreated) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

type InputContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtxoId      *UtxoId    `protobuf:"bytes,1,opt,name=utxo_id,json=utxoId,proto3" json:"utxo_id,omitempty"`
	BalanceRoot []byte     `protobuf:"bytes,2,opt,name=balance_root,json=balanceRoot,proto3" json:"balance_root,omitempty"`
	StateRoot   []byte     `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	TxPointer   *TxPointer `protobuf:"bytes,4,opt,name=tx_pointer,json=txPointer,proto3" json:"tx_pointer,omitempty"`
	ContractId  []byte     `protobuf:"bytes,5,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (x *InputContract) Reset() {
	*x = InputContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputContract) ProtoMessage() {}

func (x *InputContract) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputContract.ProtoReflect.Descriptor instead.
func (*InputContract) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{11}
}

func (x *InputContract) GetUtxoId() *UtxoId {
	if x != nil {
		return x.UtxoId
	}
	return nil
}

func (x *InputContract) GetBalanceRoot() []byte {
	if x != nil {
		return x.BalanceRoot
	}
	return nil
}

func (x *InputContract) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *InputContract) GetTxPointer() *TxPointer {
	if x != nil {
		return x.TxPointer
	}
	return nil
}

func (x *InputContract) GetContractId() []byte {
	if x != nil {
		return x.ContractId
	}
	return nil
}

type OutputContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputIndex  uint32 `protobuf:"varint,1,opt,name=input_index,json=inputIndex,proto3" json:"input_index,omitempty"`
	BalanceRoot []byte `protobuf:"bytes,2,opt,name=balance_root,json=balanceRoot,proto3" json:"balance_root,omitempty"`
	StateRoot   []byte `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
}

func (x *OutputContract) Reset() {
	*x = OutputContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputContract) ProtoMessage() {}

func (x *OutputContract) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputContract.ProtoReflect.Descriptor instead.
func (*OutputContract) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{12}
}

func (x *OutputContract) GetInputIndex() uint32 {
	if x != nil {
		return x.InputIndex
	}
	return 0
}

func (x *OutputContract) GetBalanceRoot() []byte {
	if x != nil {
		return x.BalanceRoot
	}
	return nil
}

func (x *OutputContract) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

type StorageSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StorageSlot) Reset() {
	*x = StorageSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSlot) ProtoMessage() {}

func (x *StorageSlot) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSlot.ProtoReflect.Descriptor instead.
func (*StorageSlot) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{13}
}

func (x *StorageSlot) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StorageSlot) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type UtxoId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId        []byte `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	OutputIndex uint32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (x *UtxoId) Reset() {
	*x = UtxoId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoId) ProtoMessage() {}

func (x *UtxoId) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoId.ProtoReflect.Descriptor instead.
func (*UtxoId) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{14}
}

func (x *UtxoId) GetTxId() []byte {
	if x != nil {
		return x.TxId
	}
	return nil
}

func (x *UtxoId) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

type TxPointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint32 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxIndex     uint32 `protobuf:"varint,2,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (x *TxPointer) Reset() {
	*x = TxPointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxPointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxPointer) ProtoMessage() {}

func (x *TxPointer) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxPointer.ProtoReflect.Descriptor instead.
func (*TxPointer) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{15}
}

func (x *TxPointer) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *TxPointer) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

type Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Policies) Reset() {
	*x = Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_fuel_type_v1_type_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policies) ProtoMessage() {}

func (x *Policies) ProtoReflect() protoreflect.Message {
	mi := &file_sf_fuel_type_v1_type_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policies.ProtoReflect.Descriptor instead.
func (*Policies) Descriptor() ([]byte, []int) {
	return file_sf_fuel_type_v1_type_proto_rawDescGZIP(), []int{16}
}

func (x *Policies) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_sf_fuel_type_v1_type_proto protoreflect.FileDescriptor

var file_sf_fuel_type_v1_type_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x66, 0x2f, 0x66, 0x75, 0x65, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x66,
	0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xfc, 0x02,
	0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x61, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x73, 0x67,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x76, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa8, 0x01, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xc8, 0x02, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x67, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65,
	0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x22, 0xf6, 0x02, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e,
	0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65,
	0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x77, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x04,
	0x4d, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75,
	0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x74, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65,
	0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x83, 0x04, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6f, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66,
	0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x12, 0x50, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xf0, 0x02, 0x0a, 0x04,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x49, 0x64, 0x52, 0x06,
	0x75, 0x74, 0x78, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x09, 0x74, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x99,
	0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc9, 0x02, 0x0a, 0x06, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x66, 0x2e,
	0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65,
	0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x4f, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x15, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x66, 0x2e, 0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x49, 0x64, 0x52, 0x06, 0x75, 0x74,
	0x78, 0x6f, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x66, 0x2e,
	0x66, 0x75, 0x65, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x74, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x73, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x35, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40,
	0x0a, 0x06, 0x55, 0x74, 0x78, 0x6f, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x49, 0x0a, 0x09, 0x54, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x22, 0x0a, 0x08, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x46, 0x75,
	0x65, 0x6c, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d,
	0x66, 0x75, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x66, 0x75, 0x65, 0x6c, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x66, 0x75, 0x65, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_fuel_type_v1_type_proto_rawDescOnce sync.Once
	file_sf_fuel_type_v1_type_proto_rawDescData = file_sf_fuel_type_v1_type_proto_rawDesc
)

func file_sf_fuel_type_v1_type_proto_rawDescGZIP() []byte {
	file_sf_fuel_type_v1_type_proto_rawDescOnce.Do(func() {
		file_sf_fuel_type_v1_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_fuel_type_v1_type_proto_rawDescData)
	})
	return file_sf_fuel_type_v1_type_proto_rawDescData
}

var file_sf_fuel_type_v1_type_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_sf_fuel_type_v1_type_proto_goTypes = []interface{}{
	(*Block)(nil),                 // 0: sf.fuel.type.v1.Block
	(*Transaction)(nil),           // 1: sf.fuel.type.v1.Transaction
	(*Script)(nil),                // 2: sf.fuel.type.v1.Script
	(*Create)(nil),                // 3: sf.fuel.type.v1.Create
	(*Mint)(nil),                  // 4: sf.fuel.type.v1.Mint
	(*Input)(nil),                 // 5: sf.fuel.type.v1.Input
	(*Coin)(nil),                  // 6: sf.fuel.type.v1.Coin
	(*Message)(nil),               // 7: sf.fuel.type.v1.Message
	(*Output)(nil),                // 8: sf.fuel.type.v1.Output
	(*OutputCoin)(nil),            // 9: sf.fuel.type.v1.OutputCoin
	(*OutputContractCreated)(nil), // 10: sf.fuel.type.v1.OutputContractCreated
	(*InputContract)(nil),         // 11: sf.fuel.type.v1.InputContract
	(*OutputContract)(nil),        // 12: sf.fuel.type.v1.OutputContract
	(*StorageSlot)(nil),           // 13: sf.fuel.type.v1.StorageSlot
	(*UtxoId)(nil),                // 14: sf.fuel.type.v1.UtxoId
	(*TxPointer)(nil),             // 15: sf.fuel.type.v1.TxPointer
	(*Policies)(nil),              // 16: sf.fuel.type.v1.Policies
}
var file_sf_fuel_type_v1_type_proto_depIdxs = []int32{
	1,  // 0: sf.fuel.type.v1.Block.transactions:type_name -> sf.fuel.type.v1.Transaction
	2,  // 1: sf.fuel.type.v1.Transaction.script:type_name -> sf.fuel.type.v1.Script
	3,  // 2: sf.fuel.type.v1.Transaction.create:type_name -> sf.fuel.type.v1.Create
	4,  // 3: sf.fuel.type.v1.Transaction.mint:type_name -> sf.fuel.type.v1.Mint
	16, // 4: sf.fuel.type.v1.Script.policies:type_name -> sf.fuel.type.v1.Policies
	5,  // 5: sf.fuel.type.v1.Script.inputs:type_name -> sf.fuel.type.v1.Input
	8,  // 6: sf.fuel.type.v1.Script.outputs:type_name -> sf.fuel.type.v1.Output
	16, // 7: sf.fuel.type.v1.Create.policies:type_name -> sf.fuel.type.v1.Policies
	13, // 8: sf.fuel.type.v1.Create.storage_slots:type_name -> sf.fuel.type.v1.StorageSlot
	5,  // 9: sf.fuel.type.v1.Create.inputs:type_name -> sf.fuel.type.v1.Input
	8,  // 10: sf.fuel.type.v1.Create.outputs:type_name -> sf.fuel.type.v1.Output
	15, // 11: sf.fuel.type.v1.Mint.tx_pointer:type_name -> sf.fuel.type.v1.TxPointer
	11, // 12: sf.fuel.type.v1.Mint.input_contract:type_name -> sf.fuel.type.v1.InputContract
	12, // 13: sf.fuel.type.v1.Mint.output_contract:type_name -> sf.fuel.type.v1.OutputContract
	6,  // 14: sf.fuel.type.v1.Input.coin_signed:type_name -> sf.fuel.type.v1.Coin
	6,  // 15: sf.fuel.type.v1.Input.coin_predicate:type_name -> sf.fuel.type.v1.Coin
	11, // 16: sf.fuel.type.v1.Input.contract:type_name -> sf.fuel.type.v1.InputContract
	7,  // 17: sf.fuel.type.v1.Input.message_coin_signed:type_name -> sf.fuel.type.v1.Message
	7,  // 18: sf.fuel.type.v1.Input.message_coin_predicate:type_name -> sf.fuel.type.v1.Message
	7,  // 19: sf.fuel.type.v1.Input.message_data_signed:type_name -> sf.fuel.type.v1.Message
	7,  // 20: sf.fuel.type.v1.Input.message_data_predicate:type_name -> sf.fuel.type.v1.Message
	14, // 21: sf.fuel.type.v1.Coin.utxo_id:type_name -> sf.fuel.type.v1.UtxoId
	15, // 22: sf.fuel.type.v1.Coin.tx_pointer:type_name -> sf.fuel.type.v1.TxPointer
	9,  // 23: sf.fuel.type.v1.Output.coin:type_name -> sf.fuel.type.v1.OutputCoin
	12, // 24: sf.fuel.type.v1.Output.contract:type_name -> sf.fuel.type.v1.OutputContract
	9,  // 25: sf.fuel.type.v1.Output.change:type_name -> sf.fuel.type.v1.OutputCoin
	9,  // 26: sf.fuel.type.v1.Output.variable:type_name -> sf.fuel.type.v1.OutputCoin
	10, // 27: sf.fuel.type.v1.Output.contract_created:type_name -> sf.fuel.type.v1.OutputContractCreated
	14, // 28: sf.fuel.type.v1.InputContract.utxo_id:type_name -> sf.fuel.type.v1.UtxoId
	15, // 29: sf.fuel.type.v1.InputContract.tx_pointer:type_name -> sf.fuel.type.v1.TxPointer
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_sf_fuel_type_v1_type_proto_init() }
func file_sf_fuel_type_v1_type_proto_init() {
	if File_sf_fuel_type_v1_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_fuel_type_v1_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Create); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputContractCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxPointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_fuel_type_v1_type_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_fuel_type_v1_type_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Transaction_Script)(nil),
		(*Transaction_Create)(nil),
		(*Transaction_Mint)(nil),
	}
	file_sf_fuel_type_v1_type_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Input_CoinSigned)(nil),
		(*Input_CoinPredicate)(nil),
		(*Input_Contract)(nil),
		(*Input_MessageCoinSigned)(nil),
		(*Input_MessageCoinPredicate)(nil),
		(*Input_MessageDataSigned)(nil),
		(*Input_MessageDataPredicate)(nil),
	}
	file_sf_fuel_type_v1_type_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Output_Coin)(nil),
		(*Output_Contract)(nil),
		(*Output_Change)(nil),
		(*Output_Variable)(nil),
		(*Output_ContractCreated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_fuel_type_v1_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_fuel_type_v1_type_proto_goTypes,
		DependencyIndexes: file_sf_fuel_type_v1_type_proto_depIdxs,
		MessageInfos:      file_sf_fuel_type_v1_type_proto_msgTypes,
	}.Build()
	File_sf_fuel_type_v1_type_proto = out.File
	file_sf_fuel_type_v1_type_proto_rawDesc = nil
	file_sf_fuel_type_v1_type_proto_goTypes = nil
	file_sf_fuel_type_v1_type_proto_depIdxs = nil
}
