// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sf/substreams/intern/v2/service.proto

package pbssinternalconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/streamingfast/substreams/pb/sf/substreams/intern/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SubstreamsName is the fully-qualified name of the Substreams service.
	SubstreamsName = "sf.substreams.internal.v2.Substreams"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubstreamsProcessRangeProcedure is the fully-qualified name of the Substreams's ProcessRange RPC.
	SubstreamsProcessRangeProcedure = "/sf.substreams.internal.v2.Substreams/ProcessRange"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	substreamsServiceDescriptor            = v2.File_sf_substreams_intern_v2_service_proto.Services().ByName("Substreams")
	substreamsProcessRangeMethodDescriptor = substreamsServiceDescriptor.Methods().ByName("ProcessRange")
)

// SubstreamsClient is a client for the sf.substreams.internal.v2.Substreams service.
type SubstreamsClient interface {
	ProcessRange(context.Context, *connect.Request[v2.ProcessRangeRequest]) (*connect.ServerStreamForClient[v2.ProcessRangeResponse], error)
}

// NewSubstreamsClient constructs a client for the sf.substreams.internal.v2.Substreams service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubstreamsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubstreamsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &substreamsClient{
		processRange: connect.NewClient[v2.ProcessRangeRequest, v2.ProcessRangeResponse](
			httpClient,
			baseURL+SubstreamsProcessRangeProcedure,
			connect.WithSchema(substreamsProcessRangeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// substreamsClient implements SubstreamsClient.
type substreamsClient struct {
	processRange *connect.Client[v2.ProcessRangeRequest, v2.ProcessRangeResponse]
}

// ProcessRange calls sf.substreams.internal.v2.Substreams.ProcessRange.
func (c *substreamsClient) ProcessRange(ctx context.Context, req *connect.Request[v2.ProcessRangeRequest]) (*connect.ServerStreamForClient[v2.ProcessRangeResponse], error) {
	return c.processRange.CallServerStream(ctx, req)
}

// SubstreamsHandler is an implementation of the sf.substreams.internal.v2.Substreams service.
type SubstreamsHandler interface {
	ProcessRange(context.Context, *connect.Request[v2.ProcessRangeRequest], *connect.ServerStream[v2.ProcessRangeResponse]) error
}

// NewSubstreamsHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubstreamsHandler(svc SubstreamsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	substreamsProcessRangeHandler := connect.NewServerStreamHandler(
		SubstreamsProcessRangeProcedure,
		svc.ProcessRange,
		connect.WithSchema(substreamsProcessRangeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sf.substreams.internal.v2.Substreams/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubstreamsProcessRangeProcedure:
			substreamsProcessRangeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubstreamsHandler returns CodeUnimplemented from all methods.
type UnimplementedSubstreamsHandler struct{}

func (UnimplementedSubstreamsHandler) ProcessRange(context.Context, *connect.Request[v2.ProcessRangeRequest], *connect.ServerStream[v2.ProcessRangeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("sf.substreams.internal.v2.Substreams.ProcessRange is not implemented"))
}
