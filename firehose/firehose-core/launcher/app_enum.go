// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package launcher

import (
	"fmt"
	"strings"
)

const (
	// AppStatusNotFound is a AppStatus of type NotFound.
	AppStatusNotFound AppStatus = iota
	// AppStatusCreated is a AppStatus of type Created.
	AppStatusCreated
	// AppStatusRunning is a AppStatus of type Running.
	AppStatusRunning
	// AppStatusWarning is a AppStatus of type Warning.
	AppStatusWarning
	// AppStatusStopped is a AppStatus of type Stopped.
	AppStatusStopped
)

const _AppStatusName = "NotFoundCreatedRunningWarningStopped"

var _AppStatusNames = []string{
	_AppStatusName[0:8],
	_AppStatusName[8:15],
	_AppStatusName[15:22],
	_AppStatusName[22:29],
	_AppStatusName[29:36],
}

// AppStatusNames returns a list of possible string values of AppStatus.
func AppStatusNames() []string {
	tmp := make([]string, len(_AppStatusNames))
	copy(tmp, _AppStatusNames)
	return tmp
}

var _AppStatusMap = map[AppStatus]string{
	AppStatusNotFound: _AppStatusName[0:8],
	AppStatusCreated:  _AppStatusName[8:15],
	AppStatusRunning:  _AppStatusName[15:22],
	AppStatusWarning:  _AppStatusName[22:29],
	AppStatusStopped:  _AppStatusName[29:36],
}

// String implements the Stringer interface.
func (x AppStatus) String() string {
	if str, ok := _AppStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("AppStatus(%d)", x)
}

var _AppStatusValue = map[string]AppStatus{
	_AppStatusName[0:8]:   AppStatusNotFound,
	_AppStatusName[8:15]:  AppStatusCreated,
	_AppStatusName[15:22]: AppStatusRunning,
	_AppStatusName[22:29]: AppStatusWarning,
	_AppStatusName[29:36]: AppStatusStopped,
}

// ParseAppStatus attempts to convert a string to a AppStatus
func ParseAppStatus(name string) (AppStatus, error) {
	if x, ok := _AppStatusValue[name]; ok {
		return x, nil
	}
	return AppStatus(0), fmt.Errorf("%s is not a valid AppStatus, try [%s]", name, strings.Join(_AppStatusNames, ", "))
}

// MarshalText implements the text marshaller method
func (x AppStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *AppStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseAppStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
