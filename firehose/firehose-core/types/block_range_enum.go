// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package types

import (
	"fmt"
	"strings"
)

const (
	// RangeBoundaryInclusive is a RangeBoundary of type Inclusive.
	RangeBoundaryInclusive RangeBoundary = iota
	// RangeBoundaryExclusive is a RangeBoundary of type Exclusive.
	RangeBoundaryExclusive
)

const _RangeBoundaryName = "InclusiveExclusive"

var _RangeBoundaryNames = []string{
	_RangeBoundaryName[0:9],
	_RangeBoundaryName[9:18],
}

// RangeBoundaryNames returns a list of possible string values of RangeBoundary.
func RangeBoundaryNames() []string {
	tmp := make([]string, len(_RangeBoundaryNames))
	copy(tmp, _RangeBoundaryNames)
	return tmp
}

var _RangeBoundaryMap = map[RangeBoundary]string{
	RangeBoundaryInclusive: _RangeBoundaryName[0:9],
	RangeBoundaryExclusive: _RangeBoundaryName[9:18],
}

// String implements the Stringer interface.
func (x RangeBoundary) String() string {
	if str, ok := _RangeBoundaryMap[x]; ok {
		return str
	}
	return fmt.Sprintf("RangeBoundary(%d)", x)
}

var _RangeBoundaryValue = map[string]RangeBoundary{
	_RangeBoundaryName[0:9]:                   RangeBoundaryInclusive,
	strings.ToLower(_RangeBoundaryName[0:9]):  RangeBoundaryInclusive,
	_RangeBoundaryName[9:18]:                  RangeBoundaryExclusive,
	strings.ToLower(_RangeBoundaryName[9:18]): RangeBoundaryExclusive,
}

// ParseRangeBoundary attempts to convert a string to a RangeBoundary
func ParseRangeBoundary(name string) (RangeBoundary, error) {
	if x, ok := _RangeBoundaryValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _RangeBoundaryValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return RangeBoundary(0), fmt.Errorf("%s is not a valid RangeBoundary, try [%s]", name, strings.Join(_RangeBoundaryNames, ", "))
}

// MarshalText implements the text marshaller method
func (x RangeBoundary) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *RangeBoundary) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseRangeBoundary(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
