// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sf/substreams/sink/service/v1/service.proto

package pbsinksvcconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/streamingfast/substreams/pb/sf/substreams/sink/service/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProviderName is the fully-qualified name of the Provider service.
	ProviderName = "sf.substreams.sink.service.v1.Provider"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProviderDeployProcedure is the fully-qualified name of the Provider's Deploy RPC.
	ProviderDeployProcedure = "/sf.substreams.sink.service.v1.Provider/Deploy"
	// ProviderUpdateProcedure is the fully-qualified name of the Provider's Update RPC.
	ProviderUpdateProcedure = "/sf.substreams.sink.service.v1.Provider/Update"
	// ProviderInfoProcedure is the fully-qualified name of the Provider's Info RPC.
	ProviderInfoProcedure = "/sf.substreams.sink.service.v1.Provider/Info"
	// ProviderListProcedure is the fully-qualified name of the Provider's List RPC.
	ProviderListProcedure = "/sf.substreams.sink.service.v1.Provider/List"
	// ProviderPauseProcedure is the fully-qualified name of the Provider's Pause RPC.
	ProviderPauseProcedure = "/sf.substreams.sink.service.v1.Provider/Pause"
	// ProviderStopProcedure is the fully-qualified name of the Provider's Stop RPC.
	ProviderStopProcedure = "/sf.substreams.sink.service.v1.Provider/Stop"
	// ProviderResumeProcedure is the fully-qualified name of the Provider's Resume RPC.
	ProviderResumeProcedure = "/sf.substreams.sink.service.v1.Provider/Resume"
	// ProviderRemoveProcedure is the fully-qualified name of the Provider's Remove RPC.
	ProviderRemoveProcedure = "/sf.substreams.sink.service.v1.Provider/Remove"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	providerServiceDescriptor      = v1.File_sf_substreams_sink_service_v1_service_proto.Services().ByName("Provider")
	providerDeployMethodDescriptor = providerServiceDescriptor.Methods().ByName("Deploy")
	providerUpdateMethodDescriptor = providerServiceDescriptor.Methods().ByName("Update")
	providerInfoMethodDescriptor   = providerServiceDescriptor.Methods().ByName("Info")
	providerListMethodDescriptor   = providerServiceDescriptor.Methods().ByName("List")
	providerPauseMethodDescriptor  = providerServiceDescriptor.Methods().ByName("Pause")
	providerStopMethodDescriptor   = providerServiceDescriptor.Methods().ByName("Stop")
	providerResumeMethodDescriptor = providerServiceDescriptor.Methods().ByName("Resume")
	providerRemoveMethodDescriptor = providerServiceDescriptor.Methods().ByName("Remove")
)

// ProviderClient is a client for the sf.substreams.sink.service.v1.Provider service.
type ProviderClient interface {
	Deploy(context.Context, *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Pause(context.Context, *connect.Request[v1.PauseRequest]) (*connect.Response[v1.PauseResponse], error)
	Stop(context.Context, *connect.Request[v1.StopRequest]) (*connect.Response[v1.StopResponse], error)
	Resume(context.Context, *connect.Request[v1.ResumeRequest]) (*connect.Response[v1.ResumeResponse], error)
	Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error)
}

// NewProviderClient constructs a client for the sf.substreams.sink.service.v1.Provider service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProviderClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProviderClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &providerClient{
		deploy: connect.NewClient[v1.DeployRequest, v1.DeployResponse](
			httpClient,
			baseURL+ProviderDeployProcedure,
			connect.WithSchema(providerDeployMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+ProviderUpdateProcedure,
			connect.WithSchema(providerUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		info: connect.NewClient[v1.InfoRequest, v1.InfoResponse](
			httpClient,
			baseURL+ProviderInfoProcedure,
			connect.WithSchema(providerInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+ProviderListProcedure,
			connect.WithSchema(providerListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pause: connect.NewClient[v1.PauseRequest, v1.PauseResponse](
			httpClient,
			baseURL+ProviderPauseProcedure,
			connect.WithSchema(providerPauseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stop: connect.NewClient[v1.StopRequest, v1.StopResponse](
			httpClient,
			baseURL+ProviderStopProcedure,
			connect.WithSchema(providerStopMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resume: connect.NewClient[v1.ResumeRequest, v1.ResumeResponse](
			httpClient,
			baseURL+ProviderResumeProcedure,
			connect.WithSchema(providerResumeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		remove: connect.NewClient[v1.RemoveRequest, v1.RemoveResponse](
			httpClient,
			baseURL+ProviderRemoveProcedure,
			connect.WithSchema(providerRemoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// providerClient implements ProviderClient.
type providerClient struct {
	deploy *connect.Client[v1.DeployRequest, v1.DeployResponse]
	update *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
	info   *connect.Client[v1.InfoRequest, v1.InfoResponse]
	list   *connect.Client[v1.ListRequest, v1.ListResponse]
	pause  *connect.Client[v1.PauseRequest, v1.PauseResponse]
	stop   *connect.Client[v1.StopRequest, v1.StopResponse]
	resume *connect.Client[v1.ResumeRequest, v1.ResumeResponse]
	remove *connect.Client[v1.RemoveRequest, v1.RemoveResponse]
}

// Deploy calls sf.substreams.sink.service.v1.Provider.Deploy.
func (c *providerClient) Deploy(ctx context.Context, req *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error) {
	return c.deploy.CallUnary(ctx, req)
}

// Update calls sf.substreams.sink.service.v1.Provider.Update.
func (c *providerClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Info calls sf.substreams.sink.service.v1.Provider.Info.
func (c *providerClient) Info(ctx context.Context, req *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error) {
	return c.info.CallUnary(ctx, req)
}

// List calls sf.substreams.sink.service.v1.Provider.List.
func (c *providerClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Pause calls sf.substreams.sink.service.v1.Provider.Pause.
func (c *providerClient) Pause(ctx context.Context, req *connect.Request[v1.PauseRequest]) (*connect.Response[v1.PauseResponse], error) {
	return c.pause.CallUnary(ctx, req)
}

// Stop calls sf.substreams.sink.service.v1.Provider.Stop.
func (c *providerClient) Stop(ctx context.Context, req *connect.Request[v1.StopRequest]) (*connect.Response[v1.StopResponse], error) {
	return c.stop.CallUnary(ctx, req)
}

// Resume calls sf.substreams.sink.service.v1.Provider.Resume.
func (c *providerClient) Resume(ctx context.Context, req *connect.Request[v1.ResumeRequest]) (*connect.Response[v1.ResumeResponse], error) {
	return c.resume.CallUnary(ctx, req)
}

// Remove calls sf.substreams.sink.service.v1.Provider.Remove.
func (c *providerClient) Remove(ctx context.Context, req *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// ProviderHandler is an implementation of the sf.substreams.sink.service.v1.Provider service.
type ProviderHandler interface {
	Deploy(context.Context, *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Pause(context.Context, *connect.Request[v1.PauseRequest]) (*connect.Response[v1.PauseResponse], error)
	Stop(context.Context, *connect.Request[v1.StopRequest]) (*connect.Response[v1.StopResponse], error)
	Resume(context.Context, *connect.Request[v1.ResumeRequest]) (*connect.Response[v1.ResumeResponse], error)
	Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error)
}

// NewProviderHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProviderHandler(svc ProviderHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	providerDeployHandler := connect.NewUnaryHandler(
		ProviderDeployProcedure,
		svc.Deploy,
		connect.WithSchema(providerDeployMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerUpdateHandler := connect.NewUnaryHandler(
		ProviderUpdateProcedure,
		svc.Update,
		connect.WithSchema(providerUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerInfoHandler := connect.NewUnaryHandler(
		ProviderInfoProcedure,
		svc.Info,
		connect.WithSchema(providerInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerListHandler := connect.NewUnaryHandler(
		ProviderListProcedure,
		svc.List,
		connect.WithSchema(providerListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerPauseHandler := connect.NewUnaryHandler(
		ProviderPauseProcedure,
		svc.Pause,
		connect.WithSchema(providerPauseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerStopHandler := connect.NewUnaryHandler(
		ProviderStopProcedure,
		svc.Stop,
		connect.WithSchema(providerStopMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerResumeHandler := connect.NewUnaryHandler(
		ProviderResumeProcedure,
		svc.Resume,
		connect.WithSchema(providerResumeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerRemoveHandler := connect.NewUnaryHandler(
		ProviderRemoveProcedure,
		svc.Remove,
		connect.WithSchema(providerRemoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sf.substreams.sink.service.v1.Provider/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProviderDeployProcedure:
			providerDeployHandler.ServeHTTP(w, r)
		case ProviderUpdateProcedure:
			providerUpdateHandler.ServeHTTP(w, r)
		case ProviderInfoProcedure:
			providerInfoHandler.ServeHTTP(w, r)
		case ProviderListProcedure:
			providerListHandler.ServeHTTP(w, r)
		case ProviderPauseProcedure:
			providerPauseHandler.ServeHTTP(w, r)
		case ProviderStopProcedure:
			providerStopHandler.ServeHTTP(w, r)
		case ProviderResumeProcedure:
			providerResumeHandler.ServeHTTP(w, r)
		case ProviderRemoveProcedure:
			providerRemoveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProviderHandler returns CodeUnimplemented from all methods.
type UnimplementedProviderHandler struct{}

func (UnimplementedProviderHandler) Deploy(context.Context, *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.substreams.sink.service.v1.Provider.Deploy is not implemented"))
}

func (UnimplementedProviderHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.substreams.sink.service.v1.Provider.Update is not implemented"))
}

func (UnimplementedProviderHandler) Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.substreams.sink.service.v1.Provider.Info is not implemented"))
}

func (UnimplementedProviderHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.substreams.sink.service.v1.Provider.List is not implemented"))
}

func (UnimplementedProviderHandler) Pause(context.Context, *connect.Request[v1.PauseRequest]) (*connect.Response[v1.PauseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.substreams.sink.service.v1.Provider.Pause is not implemented"))
}

func (UnimplementedProviderHandler) Stop(context.Context, *connect.Request[v1.StopRequest]) (*connect.Response[v1.StopResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.substreams.sink.service.v1.Provider.Stop is not implemented"))
}

func (UnimplementedProviderHandler) Resume(context.Context, *connect.Request[v1.ResumeRequest]) (*connect.Response[v1.ResumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.substreams.sink.service.v1.Provider.Resume is not implemented"))
}

func (UnimplementedProviderHandler) Remove(context.Context, *connect.Request[v1.RemoveRequest]) (*connect.Response[v1.RemoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.substreams.sink.service.v1.Provider.Remove is not implemented"))
}
