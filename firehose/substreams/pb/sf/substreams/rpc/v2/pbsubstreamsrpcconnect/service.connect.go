// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sf/substreams/rpc/v2/service.proto

package pbsubstreamsrpcconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/streamingfast/substreams/pb/sf/substreams/rpc/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StreamName is the fully-qualified name of the Stream service.
	StreamName = "sf.substreams.rpc.v2.Stream"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StreamBlocksProcedure is the fully-qualified name of the Stream's Blocks RPC.
	StreamBlocksProcedure = "/sf.substreams.rpc.v2.Stream/Blocks"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	streamServiceDescriptor      = v2.File_sf_substreams_rpc_v2_service_proto.Services().ByName("Stream")
	streamBlocksMethodDescriptor = streamServiceDescriptor.Methods().ByName("Blocks")
)

// StreamClient is a client for the sf.substreams.rpc.v2.Stream service.
type StreamClient interface {
	Blocks(context.Context, *connect.Request[v2.Request]) (*connect.ServerStreamForClient[v2.Response], error)
}

// NewStreamClient constructs a client for the sf.substreams.rpc.v2.Stream service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStreamClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StreamClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &streamClient{
		blocks: connect.NewClient[v2.Request, v2.Response](
			httpClient,
			baseURL+StreamBlocksProcedure,
			connect.WithSchema(streamBlocksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// streamClient implements StreamClient.
type streamClient struct {
	blocks *connect.Client[v2.Request, v2.Response]
}

// Blocks calls sf.substreams.rpc.v2.Stream.Blocks.
func (c *streamClient) Blocks(ctx context.Context, req *connect.Request[v2.Request]) (*connect.ServerStreamForClient[v2.Response], error) {
	return c.blocks.CallServerStream(ctx, req)
}

// StreamHandler is an implementation of the sf.substreams.rpc.v2.Stream service.
type StreamHandler interface {
	Blocks(context.Context, *connect.Request[v2.Request], *connect.ServerStream[v2.Response]) error
}

// NewStreamHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStreamHandler(svc StreamHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	streamBlocksHandler := connect.NewServerStreamHandler(
		StreamBlocksProcedure,
		svc.Blocks,
		connect.WithSchema(streamBlocksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sf.substreams.rpc.v2.Stream/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StreamBlocksProcedure:
			streamBlocksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStreamHandler returns CodeUnimplemented from all methods.
type UnimplementedStreamHandler struct{}

func (UnimplementedStreamHandler) Blocks(context.Context, *connect.Request[v2.Request], *connect.ServerStream[v2.Response]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("sf.substreams.rpc.v2.Stream.Blocks is not implemented"))
}
